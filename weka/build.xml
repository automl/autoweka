<project name="weka" default="compile" basedir=".">
<!-- 
  ===========================================================================
   Ant build file for weka. Tested with ant 1.6.5 and Junit 3.8.2. Requires
   JavaMail and the java activation framework for mailing unit test results.

   Type ant -projecthelp for targets and descriptions.
   Assumes weka and tests (if unit testing) are in the same directory.
   Build file can reside and be executed from either inside weka or the
   directory containing weka.

   $Revision: 12695 $
  ===========================================================================
-->

  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test/java"/>
  <property name="lib" value="lib" />
  <property name="regression_tests_root" value="src/test/resources/wekarefs"/>
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="reports"  value="reports"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="run_tests_fail" value="true"/>
  <property name="headless" value="false"/>
  <property name="macdistrib" value="osx-distrib"/>
  <property name="debug" value="on" />
  <property name="packages_external" value="../packages/external"/>
  <property name="packages_internal" value="../packages/internal"/>

  <!-- properties used when compiling/making packages -->
  <property name="wekaexejar" value="../../../weka/dist/weka.jar"/>
  <property name="junitjar" value="../../../weka/lib/junit.jar"/>
  <property name="wekaclasses" value="../../../weka/build/classes"/>
  <property name="wekatestclasses" value="../../../weka/build/testcases"/>
  <!-- valid values for the following: make, compile, compile_tests, clean -->
  <property name="packageCommand" value="make"/>

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

   <!-- general classpath definition, incl. CLASSPATH env. variable,
   // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

  <property name="proj.cp" refid="project.class.path"/>
  <path id="package.class.path">
    <pathelement path="${proj.cp}"/>
    <dirset dir="${packages_internal}">
        <include name="**/${build}/classes"/>
        <include name="**/${build}/testcases"/>
   </dirset>
   <dirset dir="${packages_external}">
     <include name="**/${build}/classes"/>
     <include name="**/${build}/testcases"/>
   </dirset>
   <fileset dir="${packages_external}">
     <include name="**/lib/*.jar"/>
     <include name="**/lib/*.zip"/>
   </fileset>
   <fileset dir="${packages_internal}">
     <include name="**/lib/*.jar"/>
     <include name="**/lib/*.zip"/>
   </fileset>
  </path>
<!--  <property name="pack.cp" refid="package.class.path"/> -->

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="compile_tests_internal" depends="compile_tests" description="Compile tests for a named internal package (run with -DpackageName=package name)">
    <echo message="Compiling ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${wekatestclasses}:${junitjar}:${cp}"/>  
    <ant antfile="build_package.xml" dir="${packages_internal}/${packageName}" target="compile_tests" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${junitjar}:${wekatestclasses}:${cp}"/>
    </ant>
  </target>
      
  <target name="compile_internal" depends="compile" description="Compile a named internal package (run with -DpackageName=package name)">
    <echo message="Compiling ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${cp}"/>
    <ant antfile="build_package.xml" dir="${packages_internal}/${packageName}" target="compile" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="clean_internal" description="Clean a named internal package (run with -DpackageName=package name)">
    <echo message="Clean ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${cp}"/>
    <ant antfile="build_package.xml" dir="${packages_internal}/${packageName}" target="clean" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="make_internal" description="Make a named internal package - compiles, generates javadoc and creates the zip file (run with -DpackageName=package name)">
    <echo message="Making ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${cp}"/>
    <ant antfile="build_package.xml" dir="${packages_internal}/${packageName}" target="make_package" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="apply_all_internal" depends="compile" description="Apply command to all internal packages. Use -DpackageCommand=[make|compile|compile_tests|clean]">
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="hotSpot"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="predictiveApriori"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="chiSquaredAttributeEval"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="consistencySubsetEval"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="classifierBasedAttributeSelection"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="costSensitiveAttributeSelection"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="raceSearch"/>
      <param name="cp" value="../classifierBasedAttributeSelection/build/classes"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="filteredAttributeSelection"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="attributeSelectionSearchMethods"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="SVMAttributeEval"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="isotonicRegression"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="leastMedSquared"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="partialLeastSquares"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="gridSearch"/>
      <param name="cp" value="../partialLeastSquares/build/classes"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="paceRegression"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="RBFNetwork"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="SPegasos"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="multiInstanceFilters"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="multiInstanceLearning"/>
      <param name="cp" value="../multiInstanceFilters/build/classes"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="classificationViaClustering"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="dagging"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="ensemblesOfNestedDichotomies"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="grading"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="metaCost"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="multiBoostAB"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="oneClassClassifier"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="ordinalClassClassifier"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="racedIncrementalLogitBoost"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="realAdaBoost"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="thresholdSelector"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="hyperPipes"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="votingFeatureIntervals"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="conjunctiveRule"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="DTNB"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="ridor"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="scriptingClassifiers"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="alternatingDecisionTrees"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="bestFirstTree"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="naiveBayesTree"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="simpleCART"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="userClassifier"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="XMeans"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="sequentialInformationalBottleneckClusterer"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="denormalize"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="wavelet"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="JDBCDriversDummyPackage"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="complementNaiveBayes"/>
    </antcall>

    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="simpleEducationalLearningSchemes"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="localOutlierFactor"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="isolationForest"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="multiLayerPerceptrons"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="supervisedAttributeScaling"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="kernelLogisticRegression"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="discriminantAnalysis"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="extraTrees"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="alternatingModelTrees"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="timeSeriesFilters"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="wekaPython"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="percentageErrorMetrics"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="niftiLoader"/>
    </antcall>
    <antcall target="${packageCommand}_internal">
      <param name="packageName" value="iterativeAbsoluteErrorRegression"/>
    </antcall>
  </target>

  <target name="compile_tests_external"  description="Compile tests for a named external package (run with -DpackageName=package name)">
    <echo message="Compiling ${packageName}"/>
    <ant antfile="build_package.xml" dir="${packages_external}/${packageName}" target="compile_tests" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${junitjar}:${wekatestclasses}:${cp}"/>
    </ant>
  </target>

  <target name="compile_external" depends="compile" description="Compile a named external package (run with -DpackageName=package name)">
    <echo message="Compiling ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${cp}"/>
    <ant antfile="build_package.xml" dir="${packages_external}/${packageName}" target="compile" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="clean_external" description="Clean a named external package (run with -DpackageName=package name)">
    <echo message="Clean ${packageName}"/>
    <ant antfile="build_package.xml" dir="${packages_external}/${packageName}" target="clean" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="make_external" description="Make a named external package - compiles, generates javadoc and creates the zip file (run with -DpackageName=package name)">
    <echo message="Making ${packageName}"/>
    <echo message="CLASSPATH ${wekaclasses}:${cp}"/>
    <ant antfile="build_package.xml" dir="${packages_external}/${packageName}" target="make_package" inheritall="false">
      <property name="package" value="${packageName}" />
      <property name="java.class.path" value="${wekaclasses}:${cp}"/>
    </ant>
  </target>

  <target name="apply_all_external" depends="compile" description="Apply command to all external packages. Use -DpackageCommand=[make|compile|compile_tests|clean]">
    <antcall target="${packageCommand}_external">
      <param name="packageName" value="CLOPE"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="DMNBtext"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="EMImputation"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="J48graft"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="LibLINEAR"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="LibSVM"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="multilayerPerceptronCS"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="NNge"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="averagedOneDependenceEstimators"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="bayesianLogisticRegression"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="citationKNN"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="decorate"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="ensembleLibrary"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="fastCorrBasedFS"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="functionalTrees"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="fuzzyLaticeReasoning"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="generalizedSequentialPatterns"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="hiddenNaiveBayes"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="latentSemanticAnalysis"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="lazyBayesianRules"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="fuzzyUnorderedRuleInduction"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="levenshteinEditDistance"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="linearForwardSelection"/>
      <param name="cp" value="../../${packages_internal}/classifierBasedAttributeSelection/build/classes"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="normalize"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="SMOTE"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="optics_dbScan"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="ordinalLearningMethod"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="ordinalStochasticDominance"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="probabilisticSignificanceAE"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="rotationForest"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="tabuAndScatterSearch"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="stackingC"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="tertius"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="winnow"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="prefuseTree"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="prefuseGraph"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="associationRulesVisualizer"/>
      <param name="cp" value="../scatterPlot3D/lib/*"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="kfGroovy"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="kfKettle"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="kfPMMLClassifierScoring"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="classifierErrors"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="classAssociationRules"/>
      <param name="cp" value="../../${packages_internal}/predictiveApriori/build/classes"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="cascadeKMeans"/>
    </antcall>

    <antcall target="${packageCommand}_external">
      <param name="packageName" value="DilcaDistance"/>
      <param name="cp" value="../fastCorrBasedFS/build/classes"/>
    </antcall>
  </target>

  <target name="apply_all" depends="compile" description="Apply command to all packages. Use -DpackageCommand=[make|compile|compile_tests|clean]"> 
    <antcall target="apply_all_internal"/>
    <antcall target="apply_all_external"/>
  </target>

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
  </target>

  <!-- Compile the java code from ${src}/weka into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile weka and deposit class files in build/classes">
    <javac srcdir="${src}" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      includeantruntime="false"
      deprecation="${deprecation}"
      source="1.7" target="1.7">

      <classpath refid="project.class.path" /> 
    </javac>
    <copy todir="${build}/classes" >
       <fileset dir="${src}">
         <include name="weka/**/*.excludes"/>
         <include name="weka/**/*.gif"/>
         <include name="weka/**/*.png"/>
         <include name="weka/**/*.jpeg"/>
         <include name="weka/**/*.jpg"/>
         <include name="weka/**/*.props"/>
         <include name="weka/**/*.txt"/>
         <include name="weka/**/*.xml"/>
         <include name="weka/**/*.kfml"/>
         <include name="weka/**/*.kf"/>
         <include name="weka/**/*.arff"/>
         <include name="weka/**/DatabaseUtils.props.*"/>
         <include name="weka/gui/beans/README*"/>
         <include name="weka/gui/knowledgeflow/README*"/>
         <include name="**/*.cup"/>
         <include name="**/*.flex"/>
         <include name="**/*.jflex"/>
         <include name="**/*.properties"/>
         <include name="**/*.default"/>
       </fileset>
    </copy>
    <rmic base="${build}/classes"
       classname="weka.experiment.RemoteEngine"/>
    <unzip src="${lib}/java-cup.jar" dest="${build}/classes">
      <patternset>
        <include name="java_cup/runtime/**/*"/>
      </patternset>
    </unzip>
    <unzip src="${lib}/bounce.jar" dest="${build}/classes">
      <patternset>
        <include name="org/**/*"/>
      </patternset>
    </unzip>
    <unzip src="${lib}/commons-compress-1.10.jar" dest="${build}/classes">
      <patternset>
        <include name="org/**/*"/>
      </patternset>
    </unzip>
    <unzip src="${lib}/mtj.jar" dest="${build}/classes">
      <patternset>
        <include name="no/uib/**/*"/>
      </patternset>
    </unzip>
    <unzip src="${lib}/core.jar" dest="${build}/classes">
      <patternset>
        <include name="com/**/*"/>
      </patternset>
    </unzip>
    <unzip src="${lib}/arpack_combined_all.jar" dest="${build}/classes">
      <patternset>
        <include name="org/**/*"/>
      </patternset>
    </unzip>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}" 
             classpathref="project.class.path"
             destdir="${doc}" 
             packagenames="weka.*, org.*"
             Author="yes" 
             Public="yes" 
             maxmemory="500m"/>
    
    <!-- insert the links to our homepage and documentation.html -->
    <replace dir="${doc}" 
             token="&#34;help-doc.html&#34;" 
             value="&#34;../documentation.html&#34; target=&#34;_blank&#34;">
      <include name="**/*.html"/>
    </replace>
      
    <replace dir="${doc}" 
             token="Help&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt;" 
             value="Help&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt; &lt;TD BGCOLOR=&#34;&#35;EEEEFF&#34; CLASS=&#34;NavBarCell1&#34;&gt; &lt;A HREF=&#34;http://www.cs.waikato.ac.nz/ml/weka/&#34; target=&#34;_blank&#34;&gt;&lt;FONT CLASS=&#34;NavBarFont1&#34;&gt;&lt;B&gt;Weka's home&lt;/B&gt;&lt;/FONT&gt;&lt;/A&gt;&#38;nbsp;&lt;/TD&gt;">
      <include name="**/*.html"/>
    </replace>
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <mkdir dir="${reports}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into build/testcases">
     <javac srcdir="${src-test}" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
            destdir="${build}/testcases"
            optimize="${optimization}"
            debug="${debug}"
            includeantruntime="false"
            deprecation="${deprecation}"
            source="1.7" target="1.7">
       <classpath refid="project.class.path" /> 
     </javac>
     <copy todir="${build}/testcases" >
       <fileset dir="${src-test}">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
          <include name="**/*.matrix"/>
       </fileset>
     </copy>
  </target>

  <!-- Put everything in ${build}/testcases into the weka-tests.jar file -->
  <target name="jar_tests" depends="compile_tests, init_dist"
   description="Creates a jar file with the test cases in ./dist">
    <jar jarfile="${dist}/weka-tests.jar" 
      basedir="${build}/testcases">
    </jar>
  </target>

  <!-- Run the test cases for the core via junit's testrunner class.
   This is a faster, simpler option than running the junit task -->
  <target name="run_tests_core" depends="compile_tests" 
   description="Execute unit tests (fast)">
<!--    <echo message="pacakge classpath ${pack.cp}"/> -->
     <java fork="yes" dir="."
      classname="junit.textui.TestRunner"
      taskname="junit" failonerror="${run_tests_fail}">
	 <arg value="weka.AllTests"/>
         <classpath refid="project.class.path" /> 
       <jvmarg value="-server"/>
       <jvmarg value="-Duser.timezone=Pacific/Auckland"/>
<!--       <jvmarg value="-Xint"/> -->
         <jvmarg value="-Djava.awt.headless=${headless}"/> 
         <jvmarg value="-Dweka.test.Regression.root=${regression_tests_root}"/>
     </java>
  </target>

  <!-- Run the test cases for the core and all packages via junit's testrunner class.
   This is a faster, simpler option than running the junit task -->

  <target name="run_tests_all" depends="compile_tests"
   description="Execute unit tests (fast)">
    <antcall target="apply_all_internal">
      <param name="packageCommand" value="clean"/>
    </antcall>
    <antcall target="apply_all_external">
      <param name="packageCommand" value="clean"/>
    </antcall>
    <antcall target="apply_all_internal">
      <param name="packageCommand" value="compile"/>
    </antcall>
    <antcall target="apply_all_internal">
      <param name="packageCommand" value="compile_tests"/>
    </antcall>
    <antcall target="apply_all_external">
      <param name="packageCommand" value="compile"/>
    </antcall>
    <antcall target="apply_all_external">
      <param name="packageCommand" value="compile_tests"/>
    </antcall>
<!--    <echo message="pacakge classpath ${pack.cp}"/> -->
    <java fork="yes" dir="."
          classname="junit.textui.TestRunner"
          taskname="junit" failonerror="${run_tests_fail}">
      <arg value="weka.AllTests"/>
      <classpath refid="package.class.path" />
      <jvmarg value="-server"/>
      <!--       <jvmarg value="-Xint"/> -->
      <jvmarg value="-Djava.awt.headless=${headless}"/> 
      <jvmarg value="-Dweka.test.Regression.root=${regression_tests_root}"/>
       <jvmarg value="-Duser.timezone=Pacific/Auckland"/>
    </java>
  </target>


<!--
  ===========================================================================
  Release making stuff
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the weka.jar file -->
  <target name="exejar" depends="compile, init_dist"
   description="Create an executable jar file in ./dist">
    <jar jarfile="${dist}/weka.jar" 
      basedir="${build}/classes">
     <manifest>
       <attribute name="Main-Class" value="weka.gui.GUIChooser"/>
     </manifest>
    </jar>
  </target>

  <!-- Put everything in ${build}/classes into the weka.jar file -->
  <target name="exejar-monolithic" depends="compile, init_dist"
   description="Create an executable jar file containing core classes and all classes from internal packages in ./dist">
    <antcall target="apply_all_internal">
      <param name="packageCommand" value="make"/>
    </antcall>
    <mkdir dir="${build}/classes-monolithic"/>
    <copy todir="${build}/classes-monolithic" >
       <fileset dir="${build}/classes">
         <include name="**/*"/>
       </fileset>
    </copy>

    <unzip dest="${build}/classes-monolithic">
    <fileset dir="${packages_internal}">
        <include name="**/dist/**/*.jar"/>
    </fileset>
    </unzip>

    <jar jarfile="${dist}/weka-monolithic.jar" 
      basedir="${build}/classes-monolithic">
     <manifest>
       <attribute name="Main-Class" value="weka.gui.GUIChooser"/>
     </manifest>
    </jar>
  </target>

  <!-- Put all .java, and .props files into ${dist}/weka-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ./dist">  
    <!-- jar up the source -->
    <jar jarfile="${dist}/weka-src.jar" 
      basedir=".">
      <include name="*.xml"/>
      <include name=".classpath.default"/>
      <include name=".project.default"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.png"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/DatabaseUtils.props.*"/>
      <include name="src/**/weka/gui/beans/README*"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.kfml"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
      <include name="resources/**/*"/>
    </jar>
  </target>

  <!-- make a jar file containing just the stuff needed for running a remote experiment server -->
  <target name="remotejar" depends="compile, init_dist"
   description="Create a jar file containing classes for remote experiments in ./dist">
     <jar jarfile="${dist}/remoteEngine.jar"
      basedir="${build}/classes"
      includes="weka/experiment/*_*.class,weka/experiment/RemoteEngine*.class,weka/experiment/Compute.class,weka/experiment/Task.class,weka/experiment/TaskStatusInfo.class,weka/core/Queue*.class,weka/core/RevisionHandler.class,weka/core/Utils.class,weka/core/RevisionUtils.class,weka/gui/GenericPropertiesCreator.props,weka/gui/GenericObjectEditor.props"/>
     <copy todir="${dist}" >
       <fileset dir="${src}/weka/experiment">
          <include name="remote.policy"/>
          <include name="remote.policy.example"/>
       </fileset>
    </copy>
    <jar jarfile="${dist}/remoteExperimentServer.jar"
     basedir="${dist}"
     includes="remoteEngine.jar,remote.policy,remote.policy.example"/>
     <delete file="${dist}/remoteEngine.jar"/>
     <delete file="${dist}/remote.policy"/>
     <delete file="${dist}/remote.policy.example"/>
   </target>

  <!-- Writes $release version number to weka/core/version.txt -->    
  <target name="set_version">
    <echo message="${release}" file="${src}/weka/core/version.txt"/>
    <echo message="${release}" file="${build}/classes/weka/core/version.txt"/>
  </target>

  <!-- Make a release -->
  <target name="release" depends="run_tests_core, release_sub_tasks"
   description="Make a release in ${release}. Run with -Drelease=&lt;number of release (eg. 3-4-1)&gt;.">
  </target>

  <target name="release_no_junit" depends="compile, release_sub_tasks"
   description="Make a release in ${release} without running junit tests. Run with -Drelease=&lt;number of release (eg. 3-4-1)&gt;.">
  </target>

  <target name="release_sub_tasks" depends="set_version, exejar, remotejar, srcjar, docs, changelog, packages_changelog">
    <!-- copy the docs to dist/docs -->

    <copy todir="weka-${release}/weka-${release}/doc" >
       <fileset dir="${doc}"/>
    </copy>
    <copy todir="weka-${release}/weka-${release}">
       <fileset dir="${dist}"/>
    </copy>
    <copy todir="weka-${release}/weka-${release}/changelogs">
       <fileset dir="../wekadocs/changelogs"/>
    </copy>
    <copy todir="weka-${release}/weka-${release}/data">
       <fileset dir="../wekadocs/data"/>
    </copy>
    <copy todir="weka-${release}/weka-${release}">
      <fileset dir="../wekadocs">
        <include name="*.pdf"/>
      </fileset>
    </copy>
    <copy todir="weka-${release}/weka-${release}">
       <fileset dir="../wekadocs">
         <include name="README*"/>
	 <include name="COPYING"/>
         <include name="documentation.*"/>
         <include name="weka.gif"/>
         <include name="weka.ico"/>
       </fileset>
    </copy>
    <copy file="resources/packageManager-source.jar" todir="weka-${release}/weka-${release}"/>
    <zip destfile="weka-${release}.zip" 
     basedir="weka-${release}"/>
  </target>

  <!-- Make a Max OSX application (NOTE: assumes that release/release_no_junit or something that calls
       release has been run first!!!). Also requires Ant version 1.7.0 or higher -->
  <target name="osx_application" description="Make an OS X application. Run with -Drelease=&lt;number of release (eg. 3-4-1)&gt;. Assumes a release target has been run first!">
    <mkdir dir="${macdistrib}"/>
    <mkdir dir="${macdistrib}/weka-${release}"/>
    <copy todir="${macdistrib}/weka-${release}">
      <fileset dir="weka-${release}/weka-${release}"/>
    </copy>
    <taskdef name="jarbundler" 
             classname="net.sourceforge.jarbundler.JarBundler" />
    <jarbundler dir="${macdistrib}"
                name="weka-${release}"
                mainclass="weka.gui.GUIChooser"
                icon="${src}/weka/gui/weka_icon_new.icns"
                version="${release}"
                verbose="true"
                VMOptions="-Xmx1Gb"
                shortname="Weka"
                arguments=""
                workingdirectory="/Users"
                jvmversion="1.7+">
      <javaproperty name="java.library.path" value="$APP_PACKAGE/Contents/Resources"/>
      <jarfileset dir="weka-${release}/weka-${release}">
        <include name="weka.jar"/>
      </jarfileset>     
      <documenttype name="Attribute Relation File Format (ARFF)"
                    extensions="arff xrff" 
                    iconFile="${src}/weka/gui/weka_icon_new.icns"
                    role="Editor"/> 
      <documenttype name="Knowledge Flow layout"
                    extensions="kf kfml" 
                    iconFile="${src}/weka/gui/weka_icon_new.icns"
                    role="Editor"/> 
    </jarbundler>

    <!-- Make a .dmg disk image -->
    <exec executable="/usr/bin/hdiutil" os="Mac OS X">
      <arg value="create"/>
      <arg value="-srcfolder"/>
      <arg value="${macdistrib}"/>
      <arg value="-volname"/>
      <arg value="weka-${release}"/>
      <arg value="-ov"/>
      <arg value="${macdistrib}/weka-${release}.dmg"/>
    </exec>
  </target>

<!-- New subversion stuff -->
 <target name="svnCheckout" description="Checkout from subversion. Run with -Dsvn_username=username -Dsvn_password=password -Dweka_branch=&lt;branch name (e.g. trunk, branches/book2ndEd-branch)&gt;.">
    <property name="source-root" value="."/>
    <property name="repository.URL" value="https://svn.cms.waikato.ac.nz/svn/weka"/>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/weka"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/wekadocs"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN"
       dir="${source-root}/" fork="true">
      <arg value="co"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="${repository.URL}/${weka_branch}/installer"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
  </target>

   <target name="changelog"
    description="Create a changelog file for a release of Weka. Run with -Dsvn_username=username -Dsvn_password=password -Drelease=&lt;number of release (eg. 3-4-1)&gt;, -Ddate_range=&lt;date range for changes (eg. {2008-07-16}:{2008-09-29})&gt;, -Dweka_branch=&lt;branch name (e.g. trunk, branches/book2ndEd-branch)&gt;.">
    <property name="repository.URL" value="https://svn.cms.waikato.ac.nz/svn/weka"/>
    <!-- Core weka -->
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true"
          output="../wekadocs/changelogs/CHANGELOG-${release}">
      <arg value="log"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="-r"/>
      <arg value="${date_range}"/>
      <arg value="-v"/>
      <arg value="${repository.URL}/${weka_branch}/weka/src/main/java/weka"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
  </target>

   <target name="packages_changelog"
    description="Create a changelog file for the team-supported packages Weka (development branch only). Run with -Dsvn_username=username -Dsvn_password=password -Drelease=&lt;number of release (eg. 3-4-1)&gt;, -Ddate_range=&lt;date range for changes (eg. {2008-07-16}:{2008-09-29})&gt;.">
    <property name="repository.URL" value="https://svn.cms.waikato.ac.nz/svn/weka"/>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true"
          output="../wekadocs/changelogs/CHANGELOG_PACKAGES-${release}">
      <arg value="log"/>
      <arg value="--username"/>
      <arg value="${svn_username}"/>
      <arg value="--password"/>
      <arg value="${svn_password}"/>
      <arg value="-r"/>
      <arg value="${date_range}"/>
      <arg value="-v"/>
      <arg value="${repository.URL}/trunk/packages/"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
  </target>

  <!-- This target is used for an automated nightly/weekly build job -->
  <target name="nightly_build"
          depends="init_tests"
          description="Does a svn checkout, builds, runs unit tests, and mails the output to mail recipients (run ant with -Dsvn_username=username -Dsvn_password=password -Dweka_branch=branch -Dmail_recipients=&lt;email,email,...&gt; -Dmail_sender=email -Dmail_smtp_host=smtp-server)">

     <!-- run the build process -->
     <ant antfile="${ant.file}" target="svnCheckout" output="${reports}/nightly_build-init.txt">
       <property name="mail_smtp_host" value="${mail_smtp_host}"/>
       <property name="mail_sender" value="${mail_sender}"/>
       <property name="mail_recipients" value="${mail_recipients}"/>
       <property name="svn_username" value="${svn_username}"/>
       <property name="svn_password" value="${svn_password}"/>
       <property name="weka_branch" value="${weka_branch}"/>
     </ant>

     <ant antfile="${ant.file}" dir="weka" target="run_tests_core" output="../${reports}/nightly_build-results.txt">
       <property name="mail_smtp_host" value="${mail_smtp_host}"/>
       <property name="mail_sender" value="${mail_sender}"/>
       <property name="mail_recipients" value="${mail_recipients}"/>
       <property name="run_tests_fail" value="false"/>
       <property name="headless" value="${headless}"/>
     </ant>

     <!-- mail the results -->
     <mail messageMimeType="text/html"
	       tolist="${mail_recipients}"
	       mailhost="${mail_smtp_host}"
	       subject="nightly build results (${weka_branch}): ${TODAY}"
	       from="${mail_sender}">
       <fileset dir="${reports}">
         <include name="nightly_build*.*"/>
       </fileset>
     </mail>
  </target>


<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${reports}"/>
    <delete dir="${doc}"/>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees!">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${src}"/>
  </target>
</project>
